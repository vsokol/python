# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
class InvalidNumber(Exception):

    def __init__(self, message):
        self.message = message


list_numbers = list()
while True:
    elem = input("Введите элемент списка (для выхода нажмите Enter) : ")
    if elem == "":
        break

    try:
        if elem.isnumeric():
            list_numbers.append(int(elem))
        else:
            raise InvalidNumber(f"Элемент {elem} не является числом")
    except InvalidNumber:
        print(f"Элемент {elem} не является числом")
print(f"Список - {list_numbers}")
